#X-Generator: crowdin.net
# ascanrulesAlpha 
#
# This file defines the default (English) variants of all of the internationalised messages
ascanalpha.desc=Aktive Scan-Regeln - Alpha

ascanalpha.examplefile.name=An example active scan rule which loads data from a file
ascanalpha.examplefile.desc=Add more information about the vulnerability here
ascanalpha.examplefile.other=This is for information that doesnt fit in any of the other sections
ascanalpha.examplefile.soln=A general description of how to solve the problem
ascanalpha.examplefile.refs=http\://zaproxy.blogspot.co.uk/2014/04/hacking-zap-4-active-scan-rules.html

ascanalpha.sourcecodedisclosure.desc=Der source code f\u00fcr die aktuelle Seite wurde vom Web-Server offenbart
ascanalpha.sourcecodedisclosure.lfibased.name=Source Code Disclosure - File Inclusion
ascanalpha.sourcecodedisclosure.lfibased.soln=Stellen Sie sicher, dass beliebige Dateien, die vom Benutzer angegeben wurden nicht in der Ausgabe enthalten sind
ascanalpha.sourcecodedisclosure.lfibased.extrainfo=Die Ausgabe f\u00fcr die Source-Code-Datei [{0}] unterscheidet sich ausreichend von den zuf\u00e4lligen Parametern [{1}] mit  [{2} %]. Der Schwellenwert ist somit [{3} %].
ascanalpha.sourcecodedisclosure.lfibased.evidence=
ascanalpha.sourcecodedisclosure.svnbased.name=Source Code Disclosure - SVN
ascanalpha.sourcecodedisclosure.svnbased.soln=Stellen Sie sicher, dass SVN-Metadaten-Dateien nicht auf dem Webserver oder Anwendungsserver bereitgestellt werden
ascanalpha.sourcecodedisclosure.svnbased.extrainfo=Der source code f\u00fcr [{0}] wurde auf [{1}] gefunden.
ascanalpha.sourcecodedisclosure.svnbased.evidence=
ascanalpha.sourcecodedisclosure.gitbased.name=Source Code Disclosure - Git\u00a0
ascanalpha.sourcecodedisclosure.gitbased.soln=Stellen Sie sicher, dass Git-Metadaten-Dateien nicht auf dem Webserver oder Anwendungsserver bereitgestellt werden
ascanalpha.sourcecodedisclosure.gitbased.extrainfo=
ascanalpha.sourcecodedisclosure.gitbased.evidence=Der source code f\u00fcr [{0}] wurde mit [{1}] extrahiert.
ascanalpha.backupfiledisclosure.name=Backup File Disclosure
ascanalpha.backupfiledisclosure.desc=Eine Sicherungskopie der Datei wurde vom Web-Server offenbart
ascanalpha.backupfiledisclosure.soln=Bearbeite keine Dateien in-Situ auf dem Webserver, und stelle sicher dass unn\u00f6tige Dateien (auch versteckte Dateien) aus dem Webserver entfernt werden.
ascanalpha.backupfiledisclosure.evidence=Eine Sicherung von [{0}] ist hier [{1}] erreichbar

ascanalpha.elinjection.name=Expression Language Injection
ascanalpha.elinjection.desc=The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed. In certain versions of Spring 3.0.5 and earlier, there was a vulnerability (CVE-2011-2730) in which Expression Language tags would be evaluated twice, which effectively exposed any application to EL injection. However, even for later versions, this weakness is still possible depending on configuration.
ascanalpha.elinjection.soln=Perform data validation best practice against untrusted input and to ensure that output encoding is applied when data arrives on the EL layer, so that no metacharacter is found by the interpreter within the user content before evaluation. The most obvious patterns to detect include ${ and \#{, but it may be possible to encode or fragment this data.
ascanalpha.elinjection.refs=https\://www.owasp.org/index.php/Expression_Language_Injection\nhttp\://cwe.mitre.org/data/definitions/917.html

ascanalpha.heartbleed.name=Heartbleed OpenSSL Vulnerability
ascanalpha.heartbleed.desc=The TLS implementation in OpenSSL 1.0.1 before 1.0.1g does not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, potentially disclosing sensitive information.
ascanalpha.heartbleed.soln=Update to OpenSSL 1.0.1g or later. Re-issue HTTPS certificates. Change asymmetric private keys and shared secret keys, since these may have been compromised, with no evidence of compromise in the server log files.
ascanalpha.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
ascanalpha.heartbleed.extrainfo=This issue was confirmed by exfiltrating data from the server, using {0}. This is unlikely to be a false positive.

ascanalpha.crossdomain.name=Cross-Domain Misconfiguration
#the refs cannot be customised for each sub-category (Adobe, Silverlight, etc)
ascanalpha.crossdomain.refs=http\://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html\nhttp\://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf\nhttp\://msdn.microsoft.com/en-US/library/cc197955%28v\=vs.95%29.aspx\nhttp\://msdn.microsoft.com/en-us/library/cc838250%28v\=vs.95%29.aspx
ascanalpha.crossdomain.adobe.read.name=Cross-Domain Misconfiguration - Adobe - Read
ascanalpha.crossdomain.adobe.send.name=Cross-Domain Misconfiguration - Adobe - Send
ascanalpha.crossdomain.adobe.desc=Flash/Silverlight based cross-site request forgery may be possible, due to a misconfiguration on the web server. 
ascanalpha.crossdomain.adobe.read.soln=Configure the crossdomain.xml file to restrict the list of domains that are allowed to make cross-domain read requests to this web server, using <allow-access-from domain\="example.com">. You should only grant access to "*" (all domains) if you are certain that this service does not host any access-controlled, personalized, or private data.
ascanalpha.crossdomain.adobe.read.extrainfo=The web server permits malicious cross-domain data read requests originating from Flash/Silverlight components served from any third party domain, to this domain. If the victim user is logged into this service, the malicious read requests are processed using the privileges of the victim, and can result in data from this service being compromised by an unauthorised third party web site, via the victim's web browser. This is particularly likely to be an issue if a Cookie based session implementation is in use. 
ascanalpha.crossdomain.adobe.send.soln=Configure the crossdomain.xml file to restrict the list of domains that are allowed to make cross-domain send (but not necessarily read) requests to this web server, using <allow-http-request-headers-from domain\="example.com" headers\="Authorization,X-Blahh">. You should only grant access to "*" (all domains) if you are certain that this service that this service is not vulnerable to Cross Site Request Forgery (CSRF) attacks.
ascanalpha.crossdomain.adobe.send.extrainfo=The web server permits malicious cross-domain data send (but not necessarily read) requests originating from Flash/Silverlight components served from any third party domain, to this domain. If the victim user is logged into this service, the malicious send requests are processed using the privileges of the victim, and can result in Cross Site Request Forgery (CSRF) type attacks, via the victim's web browser. This is particularly likely to be an issue if a Cookie based session implementation is in use.
ascanalpha.crossdomain.silverlight.name=Cross-Domain Misconfiguration - Silverlight
ascanalpha.crossdomain.silverlight.desc=Silverlight based cross-site request forgery may be possible, due to a misconfiguration on the web server.
ascanalpha.crossdomain.silverlight.soln=Configure the clientaccesspolicy.xml file to restrict the list of domains that are allowed to make cross-domain requests to this web server, using <domain uri\="https\://example.com" />. You should only grant access to "*" (all domains) if you are certain that this service does not host any access-controlled, personalized, or private data.
ascanalpha.crossdomain.silverlight.extrainfo=The web server permits malicious cross-domain requests originating from Silverlight components served from any third party domain, to this domain. If the victim user is logged into this service, the malicious requests are processed using the privileges of the victim, and can result in data from this service being compromised by an unauthorised third party web site, via the victim's web browsers. It can also result in Cross Site Request Forgery (CSRF) type attacks. This is particularly likely to be an issue if a Cookie based session implementation is in use.

